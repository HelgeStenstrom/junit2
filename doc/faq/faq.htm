<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.05 [en] (Win95; I) [Netscape]">
   <META NAME="Author" CONTENT="Erich Gamma">
   <TITLE>JUnit FAQ</TITLE>
</HEAD>
<BODY>

<H1>
<FONT COLOR="#33FF33">J</FONT><FONT COLOR="#CC0000">U</FONT>nit Frequently
Asked Questions</H1>

<LI>
<A HREF="#browsersupport">How do I implement a test case for a thrown exception?</A></LI>

<LI>
<A HREF="#browsersupport">How do I organize my test cases?</A></LI>

<BR>
<HR><A NAME="How do I implement a test case for thrown"></A>
<H2>
How do I implement a test case for a thrown exception?</H2>
Catch the exception and if it isn't thrown call the <B>fail</B> method.
Fail signals the failure of a test case. Here is an example:
<BLOCKQUOTE><TT>public void testIndextOutOfBoundsException() {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp; Vector v= new Vector(10)</TT>
<BR><TT>&nbsp;&nbsp;&nbsp; try {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o= v.elementAt(v.size());</TT>
<BR><TT>&nbsp;&nbsp;&nbsp; } catch (ArrayIndexOutOfBoundsException e) {</TT>
<BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</TT>
<BR><TT>&nbsp;&nbsp;&nbsp; }</TT>
<BR><TT>&nbsp;&nbsp;&nbsp; fail("Should raise an ArrayIndexOutOfBoundsException");</TT>
<BR><TT>}</TT></BLOCKQUOTE>

<H2>
<A NAME="How do I organize my Test"></A>How do I organize my Test Cases?</H2>
Here is one way:
<OL>
<LI>
create a test package for each of your application packages. For example,
for a package <B>myapp.util </B>define <B>myapp.utiltest</B>. Put all the
fixtures for the util package into this package.</LI>

<LI>
in myapp.utiltest define a class which creates a suite with all the tests
in this package. To do so define a class <B>AllTests</B> which includes
a single static suite method. Here is an example:</LI>

<BR><TT>&nbsp;public static Test suite() {</TT>
<BR><TT>&nbsp; TestSuite suite= new TestSuite();</TT>
<BR><TT>&nbsp; suite.addTest(Fixture1.suite());</TT>
<BR><TT>&nbsp; suite.addTest(Fixture2.suite());</TT>
<BR><TT>&nbsp; return suite;</TT>
<BR><TT>&nbsp;}</TT>
<LI>
define similar AllTests classes that creates higher level suites containing
the suites from other test packages.</LI>
</OL>
When the fixtures are in a separate test package&nbsp; the test cases don't
have access to the methods and fields with default visibility ("package
visibible"). A variation of the above convention is to put all fixtures
into the application package itself. This gives the fixtures access to
all the package visible methods and fields. To still keep the fixture classes
separate from the production classes put them into a separate directory
that you then add to the CLASSPATH. This makes it easy to ship the production
classes independent of the fixtures. Here is an example for how to do this:
<OL>
<LI>
put the fixtures classes for myapp.util into a TESTDIR\<B>tests</B>\myapp\util
directory,</LI>

<LI>
add the <B>tests</B> directory to your CLASSPATH.</LI>

<UL>
<LI>
set CLASSPATH=%CLASSPATH%;TESTDIR\<B>tests</B></LI>
</UL>
</OL>
&nbsp;
</BODY>
</HTML>
